interface ToggleOptionType {
    label: string;
    key: string;
}
export declare const FIELD_TYPES: {
    readonly COLOR: "colorPicker";
    readonly HEADER: "header";
    readonly TOGGLE: "toggle";
    readonly DROPDOWN: "dropdown";
    readonly TEXT_AREA: "textarea";
    readonly TEXT: "text";
    readonly URL: "url";
    readonly NUMBER: "number";
    readonly LINKS: "links";
    readonly RADIO_LIST: "radioList";
    readonly UNIT: "unit";
    readonly MATRIX: "matrix";
};
export type FieldEnum = typeof FIELD_TYPES[keyof typeof FIELD_TYPES];
export interface Field {
    options?: ToggleOptionType[] | AlignmentOption[];
    type: FieldEnum;
    defaultValue?: string | [];
    linkLimit?: number;
    label?: string;
    keyword?: string;
    dataField?: string;
    placeholder?: string;
    isConditional?: boolean;
    maxLength?: number;
    canResize?: boolean;
    requiresSpecialAccess?: boolean;
    asJson?: boolean;
    tooltip?: string;
    levelLimit?: number;
}
export type FieldTuple = [label: string, keyword?: string, tooltip?: string, otherFields?: Field];
interface FieldGroup {
    title?: string;
    subTitle?: string;
    defaultOpen?: boolean;
}
export interface InputGroup extends FieldGroup {
    fields?: FieldTuple[];
}
export interface OutputGroup extends FieldGroup {
    fields?: Field[];
}
export declare class ToggleOption implements ToggleOptionType {
    label: string;
    key: string;
    constructor(label: string, key: string);
}
export declare class Toggle implements Field {
    options: ToggleOption[] | [];
    type: FieldEnum;
    defaultValue: string | [];
    constructor(options: ToggleOption[], defaultValueIndex?: number);
}
export declare class DefaultValue implements Partial<Field> {
    defaultValue: string | [];
    placeholder?: string;
    constructor(defaultValue: any);
}
export declare class LinkSection implements Field {
    type: FieldEnum;
    linkLimit: number;
    defaultValue: [];
    dataField: string;
    maxLengthTitle?: number;
    asJson?: boolean;
    levelLimit?: number;
    constructor(dataField: string, linkLimit?: number, maxLengthTitle?: number, asJson?: boolean, levelLimit?: number);
}
export interface Definition {
    name: string;
    groups: InputGroup[] | FieldTuple[];
}
export interface AlignmentOption {
    id: string;
    label: string;
    activeIcon: string;
    disabled?: boolean;
}
export declare class AlignmentMatrixOptions implements Field {
    options: AlignmentOption[];
    type: FieldEnum;
    defaultValue?: string;
    constructor(rowOptions: string[], columnOptions: string[]);
    private makeMatrix;
}
export declare class CSSVariable implements Partial<Field> {
    isConditional: boolean;
    defaultValue?: string | [];
    constructor(defaultValue: string | []);
}
export {};

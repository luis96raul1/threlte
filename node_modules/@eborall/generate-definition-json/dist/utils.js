"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSSVariable = exports.AlignmentMatrixOptions = exports.LinkSection = exports.DefaultValue = exports.Toggle = exports.ToggleOption = exports.FIELD_TYPES = void 0;
// All field types
exports.FIELD_TYPES = {
    COLOR: 'colorPicker',
    HEADER: 'header',
    TOGGLE: 'toggle',
    DROPDOWN: 'dropdown',
    TEXT_AREA: 'textarea',
    TEXT: 'text',
    URL: 'url',
    NUMBER: 'number',
    LINKS: 'links',
    RADIO_LIST: 'radioList',
    UNIT: 'unit',
    MATRIX: 'matrix'
};
// An option inside a toggle
class ToggleOption {
    constructor(label, key) {
        this.label = label;
        this.key = key;
    }
}
exports.ToggleOption = ToggleOption;
// A field with a toggle
class Toggle {
    constructor(options, defaultValueIndex = 0) {
        this.options = options;
        this.type = exports.FIELD_TYPES.TOGGLE;
        this.defaultValue = options[defaultValueIndex].key;
    }
}
exports.Toggle = Toggle;
// Easy way to create a default value
class DefaultValue {
    constructor(defaultValue) {
        this.defaultValue = defaultValue;
        if (typeof defaultValue === 'string')
            this.placeholder = defaultValue;
    }
}
exports.DefaultValue = DefaultValue;
// Easy way to create a link section
class LinkSection {
    constructor(dataField, linkLimit = 10, maxLengthTitle, asJson = false, levelLimit = 1) {
        this.type = exports.FIELD_TYPES.LINKS;
        this.linkLimit = linkLimit || 10;
        this.dataField = dataField;
        this.defaultValue = [];
        this.maxLengthTitle = maxLengthTitle || undefined;
        this.asJson = asJson;
        this.levelLimit = levelLimit;
    }
}
exports.LinkSection = LinkSection;
// Easily generate a matrix of alignment options. Use an empty string '' to make a column/row empty
class AlignmentMatrixOptions {
    constructor(rowOptions, columnOptions) {
        this.options = this.makeMatrix(rowOptions, columnOptions);
        this.defaultValue = this.options[0].id;
        this.type = exports.FIELD_TYPES.MATRIX;
    }
    makeMatrix(rowOptions, columnOptions) {
        let matrixEntries = [];
        for (let row = 0; row < rowOptions.length; row++) {
            for (let col = 0; col < columnOptions.length; col++) {
                const rowValue = rowOptions[row];
                const colValue = columnOptions[col];
                matrixEntries.push({
                    id: (rowValue + ' ' + colValue).toLowerCase(),
                    label: `${rowValue} ${colValue}`,
                    activeIcon: 'square',
                    // Disable if one of the axes values is empty
                    disabled: colValue === '' || rowValue === ''
                });
            }
        }
        return matrixEntries;
    }
}
exports.AlignmentMatrixOptions = AlignmentMatrixOptions;
class CSSVariable {
    constructor(defaultValue) {
        this.defaultValue = defaultValue;
        this.isConditional = true;
    }
}
exports.CSSVariable = CSSVariable;
